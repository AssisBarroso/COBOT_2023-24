import cv2

# Carregar a imagem
img = cv2.imread('Foto_1.jpg')

# Em caso de utilização de WebCam
#cap = cv2.VideoCapture(0)
#ret, frame = cap.read()


# Aplicar filtro de suavização
img_blur = cv2.GaussianBlur(img, (7, 7), 0)

# Converter a imagem em HSV
hsv = cv2.cvtColor(img_blur, cv2.COLOR_BGR2HSV)


# Definir a faixa de valores HSV que representam a cor rosa
rosa_inferior = (140, 50, 50)
rosa_superior = (180, 255, 255)


# Aplicar uma mascara para segmentar a imagem,
# mantendo apenas os pixels na faixa de valores de cor rosa
mask = cv2.inRange(hsv, rosa_inferior, rosa_superior)


# Aplicar operação de abertura para remover ruído
kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (5, 5))
mask_open = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)


# Encontrar os contornos dos objetos rosa na imagem segmentada
contornos, _ = cv2.findContours(mask_open, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

# Definir tamanho mínimo para os contornos
area_min_contorno = 150

# Contar o número de contornos encontrados
qtd_obj_rosa = 0
cont = []
for contorno in contornos:
    if cv2.contourArea(contorno) > area_min_contorno:
        qtd_obj_rosa += 1
        cont.append(contorno)
        
res = cv2.bitwise_and(img,img, mask= mask_open)

# Imprimir o número de objetos rosa encontrados
print(f'Número de objetos rosa encontrados: {qtd_obj_rosa}')

# Mostrar a imagem segmentada com os objetos rosa destacados
cv2.drawContours(img, cont, -1, (0, 0, 255), 2)
cv2.imshow('Objetos Rosa', img)
#
cv2.imshow('Mascara',mask_open)
cv2.imshow('Resultado',res)
#
cv2.waitKey(0)
cv2.destroyAllWindows()   
